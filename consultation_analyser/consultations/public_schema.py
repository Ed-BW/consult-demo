# generated by datamodel-codegen:
#   filename:  public_schema.yaml
#   timestamp: 2025-03-20T12:04:19+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ExecutionRun(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    type: str = Field(..., max_length=32)


class User(BaseModel):
    __root__: Any


class Consultation(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    title: str = Field(..., max_length=256)
    slug: str
    users: Optional[List[User]] = None


class Question(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    text: str
    slug: str
    consultation: Consultation
    number: int


class QuestionPart(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    question: Question
    text: str
    type: str = Field(..., max_length=16)
    options: Optional[Dict[str, Any]] = Field(None, description="JSON data")
    number: int


class Respondent(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    consultation: Consultation
    data: Dict[str, Any] = Field(..., description="JSON object data")
    themefinder_respondent_id: Optional[int] = None


class HistoricalAnswer(BaseModel):
    id: str
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    text: str
    chosen_options: Dict[str, Any] = Field(..., description="JSON object data")
    is_theme_mapping_audited: Optional[bool] = None
    question_part: Optional[QuestionPart] = None
    respondent: Optional[Respondent] = None
    history_id: Optional[str] = None
    history_date: datetime
    history_change_reason: Optional[str] = Field(None, max_length=100)
    history_type: str = Field(..., max_length=1)
    history_user: Optional[User] = None


class Answer(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    question_part: QuestionPart
    respondent: Respondent
    text: str
    chosen_options: Dict[str, Any] = Field(..., description="JSON object data")
    is_theme_mapping_audited: Optional[bool] = None


class Framework(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    execution_run: Optional[ExecutionRun] = None
    question_part: QuestionPart
    change_reason: str = Field(..., max_length=256)
    user: Optional[User] = None
    precursor: Optional[Framework] = None


class Theme(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    framework: Framework
    precursor: Optional[Theme] = None
    name: str = Field(..., max_length=256)
    description: str
    key: Optional[str] = Field(None, max_length=1)


class HistoricalThemeMapping(BaseModel):
    id: str
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    reason: str
    stance: str = Field(..., max_length=8)
    user_audited: bool
    answer: Optional[Answer] = None
    theme: Optional[Theme] = None
    execution_run: Optional[ExecutionRun] = None
    history_id: Optional[str] = None
    history_date: datetime
    history_change_reason: Optional[str] = Field(None, max_length=100)
    history_type: str = Field(..., max_length=1)
    history_user: Optional[User] = None


class ThemeMapping(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    answer: Answer
    theme: Theme
    reason: str
    execution_run: Optional[ExecutionRun] = None
    stance: str = Field(..., max_length=8)
    user_audited: bool


class HistoricalSentimentMapping(BaseModel):
    id: str
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    position: str = Field(..., max_length=12)
    answer: Optional[Answer] = None
    execution_run: Optional[ExecutionRun] = None
    history_id: Optional[str] = None
    history_date: datetime
    history_change_reason: Optional[str] = Field(None, max_length=100)
    history_type: str = Field(..., max_length=1)
    history_user: Optional[User] = None


class SentimentMapping(BaseModel):
    id: Optional[str] = None
    created_at: Optional[datetime] = None
    modified_at: Optional[datetime] = None
    answer: Answer
    execution_run: ExecutionRun
    position: str = Field(..., max_length=12)


Framework.update_forward_refs()
Theme.update_forward_refs()
